%% Import data from text file
% Script for importing data from the following text file:
%
%    filename: /home/pericles/Documents/HMMY/8o/RTES/final/matlab/msgs.csv
%
% Auto-generated by MATLAB on 16-Feb-2020 22:32:52

%% Setup the Import Options and import the data
opts = delimitedTextImportOptions("NumVariables", 4);

% Specify range and delimiter
opts.DataLines = [1, Inf];
opts.Delimiter = ",";
ready
% Specify column names and types
opts.VariableNames = ["SENDER", "RECEIVER", "TIMESTAMP", "MESSAGE BODY"];
opts.VariableTypes = ["double", "double", "double", "string"];

% Specify file level properties
opts.ExtraColumnsRule = "ignore";
opts.EmptyLineRule = "skip";

% Specify variable properties
opts = setvaropts(opts, "MESSAGE BODY", "WhitespaceRule", "preserve");
opts = setvaropts(opts, "MESSAGE BODY", "EmptyFieldRule", "auto");

% Import the data
msgs7777 = readtable("all messages/msgs7777.csv", opts);
msgs6666 = readtable("all messages/msgs6666.csv", opts);
msgs8896 = readtable("all messages/msgs8896.csv", opts);

% Convert to output type
msgs8896 = table2cell(msgs8896);
numIdx = cellfun(@(x) ~isnan(str2double(x)), msgs8896);
msgs8896(numIdx) = cellfun(@(x) {str2double(x)}, msgs8896(numIdx));


% Convert to output type
msgs6666 = table2cell(msgs6666);
numIdx = cellfun(@(x) ~isnan(str2double(x)), msgs6666);
msgs6666(numIdx) = cellfun(@(x) {str2double(x)}, msgs6666(numIdx));

% Convert to output type
msgs7777 = table2cell(msgs7777);
numIdx = cellfun(@(x) ~isnan(str2double(x)), msgs7777);
msgs7777(numIdx) = cellfun(@(x) {str2double(x)}, msgs7777(numIdx));

% Clear temporary variables
clear opts


%%
% Timestamps
ts = diff(cell2mat(msgs8896(:,3)));
ts = ts(ts<300);
ts = ts(ts>0);
ts_mean = mean(ts);
ts_std = std(ts);
ts_med = median(ts);
bar(ts)
timestats = [ts_mean ts_med ts_std]


%% 
msgsAll = [msgs6666; msgs7777; msgs8896];

sender_receiver = msgsAll(:,1:2);
sender_receiver = cell2mat(sender_receiver);

senders= sender_receiver(:,1);
receivers = sender_receiver(:,2);

sender_map = containers.Map;
sender_map("6666") = 1;
sender_map("7777") = 2;
sender_map("8896") = 3;

deliveryMap = zeros(3,3);

for i=1:length(sender_receiver)
    deliveryMap(sender_map(num2str(senders(i,:))),sender_map(num2str(receivers(i,:)))) =  deliveryMap(sender_map(num2str(senders(i,:))),sender_map(num2str(receivers(i,:)))) + 1;
end

deliveryMap

totalSent = [sum(deliveryMap(1,:)), sum(deliveryMap(2,:)), sum(deliveryMap(3,:))];
totalRecv = [sum(deliveryMap(:,1)), sum(deliveryMap(:,2)), sum(deliveryMap(:,3))];

figure
subplot(1,2,1)
pie(totalSent)
legend("Sent by 6666","Sent by 7777","Sent by 8896")
title("Messages sent by each node")
subplot(1,2,2)
pie(totalRecv)
legend("Received by 6666","Received by 7777","Received by 8896")
title("Messages Received by each node")

%% BARS
% bar sent
figure
subplot(1,2,1)
% y = [[deliveryMap(1,2), deliveryMap(1,3)] ; [deliveryMap(2,1),deliveryMap(2,3)]; [deliveryMap(3,1),deliveryMap(3,2)]];
y = [deliveryMap(1,:) ; deliveryMap(2,:); deliveryMap(3,:)];

X = categorical({'Sent by node 6666','Sent by node 7777','Sent by node 8896'}) ;
bar(X,y,'stacked')
title("Messages sent to each other")


% bar received
subplot(1,2,2)
y = [deliveryMap(:,1)' ; deliveryMap(:,2)' ; deliveryMap(:,3)'];
X = categorical({'Recvd by node 6666','Recvd by node 7777','Recvd by node 8896'}) ;
bar(X,y,'stacked')
title("Messages received by each other")

